// Use DBML to define your database structure
// Docs: https://dbml.dbdiagram.io/docs

// AP system
// Eventual consistency
// Async Logical (Row based) replication
// Isolation level: Repeatable read

Enum media_type {
  audio
  video
  document
  image
}

Table profile {
  id bigint [primary key, increment]
  name varchar [not null]
  login varchar [not null, unique]
  about varchar
  photo varchar
  city varchar [not null]
}

Table interest {
  id bigint [primary key, increment]
  name varchar [not null, unique]
}

Table profile_interest {
  id bigint [primary key, increment]
  profile_id bigint [not null, ref: > profile.id]
  interest_id bigint [not null, ref: > interest.id]

  indexes {
    (interest_id, profile_id) [name: 'profile_interest_interest_id_profile_id_ux', unique]
  }
}

Table post {
  id bigint [primary key, increment]
  body text [not null, note: 'Content of the post']
  profile_id bigint [not null, ref: > profile.id]
  like_counter integer
  view_counter integer
  is_draft bool [not null]
  created_at timestamp [not null]

  indexes {
    (profile_id) [name: 'post_profile_id_ix']
  }
}

Table media {
  id bigint [primary key, increment]
  post_id bigint [not null, ref: > post.id]
  type media_type [not null]
  url varchar [not null]

  indexes {
    (post_id) [name: 'media_post_id_ix']
  }
}

Table hashtag {
  id bigint [primary key, increment]
  name varchar [unique, not null]
}

Table profile_interest {
  id bigint [primary key, increment]
  profile_id bigint [not null, ref: > profile.id]
  interest_id bigint [not null, ref: > interest.id]

  indexes {
    (interest_id, profile_id) [name: 'profile_interest_interest_id_profile_id_unq', unique]
  }
}

Table post_hashtag {
  id bigint [primary key, increment]
  hashtag_id bigint [not null, ref: > hashtag.id]
  post_id bigint [not null, ref: > post.id]

  indexes {
    (post_id, hashtag_id) [name: 'post_hashtag_post_id_hashtag_id_ux', unique]
  }
}

Table chat {
  id bigint [primary key, increment]
  name varchar [not null]
}

Table chat_profile {
  id bigint [primary key, unique]
  profile_id bigint [not null, ref: > profile.id]
  chat_id bigint [not null, ref: > chat.id]

  indexes {
    (profile_id, chat_id) [unique, name: 'chat_profile_profile_id_chat_id_ux']
  }
}